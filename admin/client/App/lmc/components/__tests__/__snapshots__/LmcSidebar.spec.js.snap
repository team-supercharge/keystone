// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LmcSidebar should render correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="lmc-sidebar"
  >
    <LmcSidebarFilter
      isChecked={false}
      onFormChange={[Function]}
      onSwitchChange={[Function]}
    />
    <LmcCreateButton
      buttonText="Item"
      listId="Item"
      onCreate={[MockFunction]}
      style={
        Object {
          "borderRadius": 0,
        }
      }
      title="Add a new Item"
    />
    <ul
      className="lmc-sidebar-list"
    >
      <LmcSidebarItem
        isSelected={true}
        itemData={
          Object {
            "id": "testId1",
            "name": Object {
              "first": "test",
              "last": "id1",
            },
            "status": "active",
          }
        }
        onClick={[Function]}
      />
      <LmcSidebarItem
        isSelected={false}
        itemData={
          Object {
            "id": "testId2",
            "name": Object {
              "first": "test",
              "last": "id2",
            },
            "status": "active",
          }
        }
        onClick={[Function]}
      />
    </ul>
  </div>,
  "nodes": Array [
    <div
      className="lmc-sidebar"
    >
      <LmcSidebarFilter
        isChecked={false}
        onFormChange={[Function]}
        onSwitchChange={[Function]}
      />
      <LmcCreateButton
        buttonText="Item"
        listId="Item"
        onCreate={[MockFunction]}
        style={
          Object {
            "borderRadius": 0,
          }
        }
        title="Add a new Item"
      />
      <ul
        className="lmc-sidebar-list"
      >
        <LmcSidebarItem
          isSelected={true}
          itemData={
            Object {
              "id": "testId1",
              "name": Object {
                "first": "test",
                "last": "id1",
              },
              "status": "active",
            }
          }
          onClick={[Function]}
        />
        <LmcSidebarItem
          isSelected={false}
          itemData={
            Object {
              "id": "testId2",
              "name": Object {
                "first": "test",
                "last": "id2",
              },
              "status": "active",
            }
          }
          onClick={[Function]}
        />
      </ul>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <LmcSidebar
        itemLabel="Item"
        items={
          Array [
            Object {
              "id": "testId1",
              "name": Object {
                "first": "test",
                "last": "id1",
              },
              "status": "active",
            },
            Object {
              "id": "testId2",
              "name": Object {
                "first": "test",
                "last": "id2",
              },
              "status": "active",
            },
            Object {
              "id": "testId3",
              "name": Object {
                "first": "test",
                "last": "id3",
              },
              "status": "inactive",
            },
          ]
        }
        listId="Item"
        onCreate={[MockFunction]}
        selectedItem="testId1"
        setSelectedItem={[MockFunction]}
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": LmcSidebar {
        "_reactInternalInstance": [Circular],
        "calculateHidden": [Function],
        "context": Object {},
        "handleFormChange": [Function],
        "handleSwitchChange": [Function],
        "props": Object {
          "itemLabel": "Item",
          "items": Array [
            Object {
              "id": "testId1",
              "name": Object {
                "first": "test",
                "last": "id1",
              },
              "status": "active",
            },
            Object {
              "id": "testId2",
              "name": Object {
                "first": "test",
                "last": "id2",
              },
              "status": "active",
            },
            Object {
              "id": "testId3",
              "name": Object {
                "first": "test",
                "last": "id3",
              },
              "status": "inactive",
            },
          ],
          "listId": "Item",
          "onCreate": [MockFunction],
          "selectedItem": "testId1",
          "setSelectedItem": [MockFunction],
        },
        "refs": Object {},
        "state": Object {
          "displayActiveItems": true,
          "nameFilter": "",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="lmc-sidebar"
        >
          <LmcSidebarFilter
            isChecked={false}
            onFormChange={[Function]}
            onSwitchChange={[Function]}
          />
          <LmcCreateButton
            buttonText="Item"
            listId="Item"
            onCreate={[MockFunction]}
            style={
              Object {
                "borderRadius": 0,
              }
            }
            title="Add a new Item"
          />
          <ul
            className="lmc-sidebar-list"
          >
            <LmcSidebarItem
              isSelected={true}
              itemData={
                Object {
                  "id": "testId1",
                  "name": Object {
                    "first": "test",
                    "last": "id1",
                  },
                  "status": "active",
                }
              }
              onClick={[Function]}
            />
            <LmcSidebarItem
              isSelected={false}
              itemData={
                Object {
                  "id": "testId2",
                  "name": Object {
                    "first": "test",
                    "last": "id2",
                  },
                  "status": "active",
                }
              }
              onClick={[Function]}
            />
          </ul>
        </div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="lmc-sidebar"
        >
          <LmcSidebarFilter
            isChecked={false}
            onFormChange={[Function]}
            onSwitchChange={[Function]}
          />
          <LmcCreateButton
            buttonText="Item"
            listId="Item"
            onCreate={[MockFunction]}
            style={
              Object {
                "borderRadius": 0,
              }
            }
            title="Add a new Item"
          />
          <ul
            className="lmc-sidebar-list"
          >
            <LmcSidebarItem
              isSelected={true}
              itemData={
                Object {
                  "id": "testId1",
                  "name": Object {
                    "first": "test",
                    "last": "id1",
                  },
                  "status": "active",
                }
              }
              onClick={[Function]}
            />
            <LmcSidebarItem
              isSelected={false}
              itemData={
                Object {
                  "id": "testId2",
                  "name": Object {
                    "first": "test",
                    "last": "id2",
                  },
                  "status": "active",
                }
              }
              onClick={[Function]}
            />
          </ul>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <LmcSidebar
    itemLabel="Item"
    items={
      Array [
        Object {
          "id": "testId1",
          "name": Object {
            "first": "test",
            "last": "id1",
          },
          "status": "active",
        },
        Object {
          "id": "testId2",
          "name": Object {
            "first": "test",
            "last": "id2",
          },
          "status": "active",
        },
        Object {
          "id": "testId3",
          "name": Object {
            "first": "test",
            "last": "id3",
          },
          "status": "inactive",
        },
      ]
    }
    listId="Item"
    onCreate={[MockFunction]}
    selectedItem="testId1"
    setSelectedItem={[MockFunction]}
  />,
}
`;
