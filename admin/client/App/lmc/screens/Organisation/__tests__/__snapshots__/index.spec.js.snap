// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LmcOrganisationScreen renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
      Object {
        "display": "flex",
        "flexDirection": "column",
      }
    }
  >
    <div
      style={
        Object {
          "zIndex": 2,
        }
      }
    >
      <Connect(LmcTabBar)
        items={
          Array [
            Object {
              "label": "Team",
              "url": "team",
            },
            Object {
              "label": "Shift Passwords",
              "url": "passwords",
            },
            Object {
              "label": "Documents",
              "url": "documents",
            },
          ]
        }
        resourceUrl="organisation"
      />
    </div>
    <div>
      <div
        className="testClass"
      >
        Test
      </div>
    </div>
  </div>,
  "nodes": Array [
    <div
      style={
        Object {
          "display": "flex",
          "flexDirection": "column",
        }
      }
    >
      <div
        style={
          Object {
            "zIndex": 2,
          }
        }
      >
        <Connect(LmcTabBar)
          items={
            Array [
              Object {
                "label": "Team",
                "url": "team",
              },
              Object {
                "label": "Shift Passwords",
                "url": "passwords",
              },
              Object {
                "label": "Documents",
                "url": "documents",
              },
            ]
          }
          resourceUrl="organisation"
        />
      </div>
      <div>
        <div
          className="testClass"
        >
          Test
        </div>
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <LmcOrganisationScreen>
        <div
          className="testClass"
        >
          Test
        </div>
      </LmcOrganisationScreen>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": LmcOrganisationScreen {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": <div
            className="testClass"
          >
            Test
          </div>,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          style={
            Object {
              "display": "flex",
              "flexDirection": "column",
            }
          }
        >
          <div
            style={
              Object {
                "zIndex": 2,
              }
            }
          >
            <Connect(LmcTabBar)
              items={
                Array [
                  Object {
                    "label": "Team",
                    "url": "team",
                  },
                  Object {
                    "label": "Shift Passwords",
                    "url": "passwords",
                  },
                  Object {
                    "label": "Documents",
                    "url": "documents",
                  },
                ]
              }
              resourceUrl="organisation"
            />
          </div>
          <div>
            <div
              className="testClass"
            >
              Test
            </div>
          </div>
        </div>,
        "_debugID": 2,
        "_renderedOutput": <div
          style={
            Object {
              "display": "flex",
              "flexDirection": "column",
            }
          }
        >
          <div
            style={
              Object {
                "zIndex": 2,
              }
            }
          >
            <Connect(LmcTabBar)
              items={
                Array [
                  Object {
                    "label": "Team",
                    "url": "team",
                  },
                  Object {
                    "label": "Shift Passwords",
                    "url": "passwords",
                  },
                  Object {
                    "label": "Documents",
                    "url": "documents",
                  },
                ]
              }
              resourceUrl="organisation"
            />
          </div>
          <div>
            <div
              className="testClass"
            >
              Test
            </div>
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <LmcOrganisationScreen>
    <div
      className="testClass"
    >
      Test
    </div>
  </LmcOrganisationScreen>,
}
`;
