// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LmcResidentsScreen renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
      Object {
        "display": "flex",
        "flexDirection": "row",
        "margin": "0 auto",
        "maxWidth": 2000,
      }
    }
  >
    <div
      style={
        Object {
          "flex": "1",
          "zIndex": "1",
        }
      }
    >
      <LmcSidebar
        itemLabel="Resident"
        items={
          Array [
            Object {
              "id": "testId1",
              "name": "testName1",
            },
            Object {
              "id": "testId2",
              "name": "testName2",
            },
          ]
        }
        listId="Resident"
        onCreate={[Function]}
        selectedItem="testId1"
        setSelectedItem={[MockFunction]}
        styles={
          Object {
            "height": "91.5vh",
            "maxHeight": "91.5vh",
          }
        }
        title="Residents"
      />
    </div>
    <div
      style={
        Object {
          "background": "#fbfbfb",
          "flex": "3.5",
          "minWidth": 0,
          "wordWrap": "break-word",
        }
      }
    >
      <Connect(LmcTabBar)
        items={
          Array [
            Object {
              "label": "Profile",
              "octicon": "person",
              "url": "profile",
            },
            Object {
              "label": "Documents",
              "octicon": "file",
              "url": "documents",
            },
          ]
        }
        resourceUrl="residents"
      />
      <div
        style={
          Object {
            "height": "86vh",
            "overflowY": "auto",
            "padding": "50px 20px 0px 20px",
            "width": "100%",
          }
        }
      >
        <div
          style={
            Object {
              "margin": "0 auto",
              "maxWidth": 1000,
            }
          }
        />
      </div>
    </div>
  </div>,
  "nodes": Array [
    <div
      style={
        Object {
          "display": "flex",
          "flexDirection": "row",
          "margin": "0 auto",
          "maxWidth": 2000,
        }
      }
    >
      <div
        style={
          Object {
            "flex": "1",
            "zIndex": "1",
          }
        }
      >
        <LmcSidebar
          itemLabel="Resident"
          items={
            Array [
              Object {
                "id": "testId1",
                "name": "testName1",
              },
              Object {
                "id": "testId2",
                "name": "testName2",
              },
            ]
          }
          listId="Resident"
          onCreate={[Function]}
          selectedItem="testId1"
          setSelectedItem={[MockFunction]}
          styles={
            Object {
              "height": "91.5vh",
              "maxHeight": "91.5vh",
            }
          }
          title="Residents"
        />
      </div>
      <div
        style={
          Object {
            "background": "#fbfbfb",
            "flex": "3.5",
            "minWidth": 0,
            "wordWrap": "break-word",
          }
        }
      >
        <Connect(LmcTabBar)
          items={
            Array [
              Object {
                "label": "Profile",
                "octicon": "person",
                "url": "profile",
              },
              Object {
                "label": "Documents",
                "octicon": "file",
                "url": "documents",
              },
            ]
          }
          resourceUrl="residents"
        />
        <div
          style={
            Object {
              "height": "86vh",
              "overflowY": "auto",
              "padding": "50px 20px 0px 20px",
              "width": "100%",
            }
          }
        >
          <div
            style={
              Object {
                "margin": "0 auto",
                "maxWidth": 1000,
              }
            }
          />
        </div>
      </div>
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <LmcResidentsScreen
        fetchResidentsAndSelect={[MockFunction]}
        residents={
          Array [
            Object {
              "id": "testId1",
              "name": "testName1",
            },
            Object {
              "id": "testId2",
              "name": "testName2",
            },
          ]
        }
        selectList={[MockFunction]}
        selectedResident="testId1"
        setSelectedResident={[MockFunction]}
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": LmcResidentsScreen {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onCreateResidentComplete": [Function],
        "props": Object {
          "fetchResidentsAndSelect": [MockFunction],
          "residents": Array [
            Object {
              "id": "testId1",
              "name": "testName1",
            },
            Object {
              "id": "testId2",
              "name": "testName2",
            },
          ],
          "selectList": [MockFunction],
          "selectedResident": "testId1",
          "setSelectedResident": [MockFunction],
        },
        "refs": Object {},
        "renderDesktop": [Function],
        "renderMobile": [Function],
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          style={
            Object {
              "display": "flex",
              "flexDirection": "row",
              "margin": "0 auto",
              "maxWidth": 2000,
            }
          }
        >
          <div
            style={
              Object {
                "flex": "1",
                "zIndex": "1",
              }
            }
          >
            <LmcSidebar
              itemLabel="Resident"
              items={
                Array [
                  Object {
                    "id": "testId1",
                    "name": "testName1",
                  },
                  Object {
                    "id": "testId2",
                    "name": "testName2",
                  },
                ]
              }
              listId="Resident"
              onCreate={[Function]}
              selectedItem="testId1"
              setSelectedItem={[MockFunction]}
              styles={
                Object {
                  "height": "91.5vh",
                  "maxHeight": "91.5vh",
                }
              }
              title="Residents"
            />
          </div>
          <div
            style={
              Object {
                "background": "#fbfbfb",
                "flex": "3.5",
                "minWidth": 0,
                "wordWrap": "break-word",
              }
            }
          >
            <Connect(LmcTabBar)
              items={
                Array [
                  Object {
                    "label": "Profile",
                    "octicon": "person",
                    "url": "profile",
                  },
                  Object {
                    "label": "Documents",
                    "octicon": "file",
                    "url": "documents",
                  },
                ]
              }
              resourceUrl="residents"
            />
            <div
              style={
                Object {
                  "height": "86vh",
                  "overflowY": "auto",
                  "padding": "50px 20px 0px 20px",
                  "width": "100%",
                }
              }
            >
              <div
                style={
                  Object {
                    "margin": "0 auto",
                    "maxWidth": 1000,
                  }
                }
              />
            </div>
          </div>
        </div>,
        "_debugID": 2,
        "_renderedOutput": <div
          style={
            Object {
              "display": "flex",
              "flexDirection": "row",
              "margin": "0 auto",
              "maxWidth": 2000,
            }
          }
        >
          <div
            style={
              Object {
                "flex": "1",
                "zIndex": "1",
              }
            }
          >
            <LmcSidebar
              itemLabel="Resident"
              items={
                Array [
                  Object {
                    "id": "testId1",
                    "name": "testName1",
                  },
                  Object {
                    "id": "testId2",
                    "name": "testName2",
                  },
                ]
              }
              listId="Resident"
              onCreate={[Function]}
              selectedItem="testId1"
              setSelectedItem={[MockFunction]}
              styles={
                Object {
                  "height": "91.5vh",
                  "maxHeight": "91.5vh",
                }
              }
              title="Residents"
            />
          </div>
          <div
            style={
              Object {
                "background": "#fbfbfb",
                "flex": "3.5",
                "minWidth": 0,
                "wordWrap": "break-word",
              }
            }
          >
            <Connect(LmcTabBar)
              items={
                Array [
                  Object {
                    "label": "Profile",
                    "octicon": "person",
                    "url": "profile",
                  },
                  Object {
                    "label": "Documents",
                    "octicon": "file",
                    "url": "documents",
                  },
                ]
              }
              resourceUrl="residents"
            />
            <div
              style={
                Object {
                  "height": "86vh",
                  "overflowY": "auto",
                  "padding": "50px 20px 0px 20px",
                  "width": "100%",
                }
              }
            >
              <div
                style={
                  Object {
                    "margin": "0 auto",
                    "maxWidth": 1000,
                  }
                }
              />
            </div>
          </div>
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <LmcResidentsScreen
    fetchResidentsAndSelect={[MockFunction]}
    residents={
      Array [
        Object {
          "id": "testId1",
          "name": "testName1",
        },
        Object {
          "id": "testId2",
          "name": "testName2",
        },
      ]
    }
    selectList={[MockFunction]}
    selectedResident="testId1"
    setSelectedResident={[MockFunction]}
  />,
}
`;
